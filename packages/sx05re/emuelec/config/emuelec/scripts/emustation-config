#!/bin/sh

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2019-present Shanti Gilbert (https://github.com/shantigilbert)

# Source predefined functions and variables
. /etc/profile

# odroidgoa


function check_pwd() {

EE_CONF="${EE_DIR}/configs/emuelec.conf"
ESSETTINGS="/storage/.config/emulationstation/es_settings.cfg"

PWDFILE="${1}"

while read line; do 

# Extract the first part (usually username)
FIRST="${line#*=}"  # read from = onwards
FIRST="${FIRST%%:\{#\}:*}"  # until a :{#}: is found

# Extract the second part (usually password)
SECOND="${line##*:\{#\}:}"  # read from :{#}: onwards

case "$line" in
    WIFI=*)
    if [[ ! -z "${FIRST}" ]] && [[ ! -z "${SECOND}" ]]; then
        set_ee_setting wifi.ssid "${FIRST}"
        set_ee_setting wifi.key "${SECOND}"
        set_ee_setting wifi.enabled 1
        #echo "WiFi information added"
    fi
    ;;
    RAC=*)
    if [[ ! -z "${FIRST}" ]] && [[ ! -z "${SECOND}" ]]; then
        set_ee_setting global.retroachievements 1
        set_ee_setting global.retroachievements.username "${FIRST}"
        set_ee_setting global.retroachievements.password "${SECOND}"
        # echo "Retroachievements information added"
    fi
    ;;
    SS=*)
    if [[ ! -z "${FIRST}" ]] && [[ ! -z "${SECOND}" ]]; then
        sed -i '/<\/config>/d' "${ESSETTINGS}"
        sed -i '/<string name="ScreenScraperPass" /d' "${ESSETTINGS}"
        sed -i '/<string name="ScreenScraperUser" /d' "${ESSETTINGS}"
        
        echo "	<string name=\"ScreenScraperPass\" value=\"${SECOND}\" />" >> "${ESSETTINGS}"
        echo "	<string name=\"ScreenScraperUser\" value=\"${FIRST}\" />" >> "${ESSETTINGS}"
        echo '</config>' >> "${ESSETTINGS}" 
        # echo "screenscraper information added"
    fi    
    ;;
    LANG=*)
        if [[ ! -z "${FIRST}" ]]; then
        set_ee_setting system.language "${FIRST}"
        fi
    ;;
    TZ=*)
        if [[ ! -z "${FIRST}" ]]; then
        set_ee_setting system.timezone "${FIRST}"
        fi
    ;;
esac

done < "${PWDFILE}"

}

# Check if we have a ee_defaults.txt file and if true process it
PWDFILE="/flash/ee_defaults.txt"
[ ! -f "${PWDFILE}" ] && PWDFILE="/emuelec/configs/ee_defaults.txt"
[ ! -f "${PWDFILE}" ] && PWDFILE="/storage/roms/ee_defaults.txt"
[ -f "${PWDFILE}" ] && check_pwd ${PWDFILE}

# Make sure retroarch is not running before starting emulationstation to avoid sound conflicts
while pgrep -x /usr/bin/retroarch >/dev/null; do
    systemctl stop retroarch
    sleep 1
done

# Wait for the time specified in ee_load.delay setting in emuelec.conf
LOADTIME=$(get_ee_setting ee_load.delay)
[[ -z "$LOADTIME" ]] && LOADTIME=0
sleep $LOADTIME

# Kodi seems to set its own FB settings for 720p, so we revert them to one that work on ES, I use all resolutions just in case :)
/emuelec/scripts/setres.sh


# Look for samba mounts to /storage/roms, MAKE ABSOLUTELY SURE YOUR MOUNT INFORMATION IS CORRECT OR ELSE YOU WILL GET NO ROMS AT ALL!
if  compgen -G /storage/.config/system.d/storage-roms*.mount > /dev/null; then

[[ -L "/storage/roms" ]] && rm /storage/roms
    umount /storage/roms > /dev/null 2>&1
    mkdir -p /var/media/EEROMS
    mount -t vfat -o codepage=950,iocharset=utf8 "LABEL=EEROMS" /var/media/EEROMS > /dev/null 2>&1

    for f in /storage/.config/system.d/storage-roms*.mount; do
        systemctl enable $(basename ${f}) > /dev/null 2>&1
        systemctl start $(basename ${f}) > /dev/null 2>&1
        systemctl is-active --quiet $(basename ${f}) && echo "Mounted ${f} from samba roms"
        
    done
else

# Lets try and find some roms on a mounted USB drive
# name of the file we need to put in the roms folder in your USB or SDCARD
ROMFILE="emuelecroms"

# Only run the USB check if the ROMFILE does not exists in /storage/roms, this can help for manually created symlinks or network shares
# or if you want to skip the USB rom mount for whatever reason
if  [ ! -f "/storage/roms/$ROMFILE" ]; then

# if the file is not present then we look for the file in connected USB media, and only return the first match 
FULLPATHTOROMS="$(find /media/*/roms/ -name $ROMFILE* -maxdepth 1 | head -n 1)"

# stop samba while we search where the ROMS folder will be pointing
systemctl stop smbd

if [[ -z "${FULLPATHTOROMS}" ]]; then
# Can't find the ROMFILE, if the symlink exists, then remove it and mount the roms partition
[[ -L "/storage/roms" ]] && rm /storage/roms

if /usr/bin/busybox mountpoint -q /var/media/EEROMS ; then
      umount /var/media/EEROMS > /dev/null 2>&1
      rmdir /var/media/EEROMS > /dev/null 2>&1
fi
      mkdir -p /storage/roms
      mount -t vfat -o codepage=950,iocharset=utf8 "LABEL=EEROMS" /storage/roms
else
# unmount the roms partition and make a symlink to the external media, mount the roms partition in media

if /usr/bin/busybox mountpoint -q /storage/roms ; then
    umount /storage/roms > /dev/null 2>&1
    rmdir /storage/roms > /dev/null 2>&1
fi
    umount /var/media/EEROMS > /dev/null 2>&1
    mkdir -p /var/media/EEROMS
    mount -t vfat -o codepage=950,iocharset=utf8 "LABEL=EEROMS" /var/media/EEROMS

# we strip the name of the file.
  PATHTOROMS=${FULLPATHTOROMS%$ROMFILE}

# this might be overkill but we need to double check that there is no symlink to roms folder already
# only delete the symlink if the ROMFILE is found.
# this could be bad if you manually create the symlink, but if you do that, then you know how to edit this file :) 
# but we need to find a better way
       
[[ -L "/storage/roms" ]] && rm /storage/roms
   
# All the sanity checks have passed, we have a ROMFILE so we create the symlink to the roms in our USB
## this could potentially be a mount bind, but for now symlink helps us identify if its external or not.
    ln -sTf "$PATHTOROMS" /storage/roms
  fi 
fi 

fi # samba 

# We look for themes
umount /emuelec/themes > /dev/null 2>&1
mkdir -p /emuelec/themes > /dev/null 2>&1
        
if [[ -d "/var/media/EEROMS/themes" ]]; then
        mount --bind /var/media/EEROMS/themes /emuelec/themes
elif [[ -d "/storage/roms/themes" ]]; then
        mount --bind /storage/roms/themes /emuelec/themes
fi

systemctl start smbd

# Set audio to alsa if we are starting retroarch or default otherwise
[[ "$1" == "retroarch" ]] && set_audio alsa || set_audio default

TZ=$(get_ee_setting system.timezone)
echo "TIMEZONE=$TZ" > /storage/.cache/timezone
systemctl restart tz-data.service

# create charmap used for translations
locale=$(get_ee_setting system.language)
charmap="UTF-8"
lang="${locale}.${charmap}"
locpath="/emuelec/configs/locale"
i18npath="$locpath/i18n"
localepath="$locpath/$lang"

if [ $locale != "en_US" ]; then
	if [ ! -d $localepath ]; then
		export I18NPATH=$i18npath
		/usr/bin/localedef -f $charmap -i $locale $localepath
	fi
fi

export LOCPATH=$locpat
export LANG=$lang
export LANGUAGE=$lang
systemctl import-environment LANG
systemctl import-environment LOCPATH
systemctl import-environment I18NPATH
systemctl import-environment LANGUAGE

if [ "$EE_DEVICE" == "OdroidGoAdvance" ] || [ "$EE_DEVICE" == "GameForce" ]; then
# For some reason the audio is being reseted to 100 at boot, so we reaply the saved settings here
/emuelec/scripts/odroidgoa_utils.sh vol $(get_ee_setting "audio.volume")

# Workaround for theme not displaying correctly 
CONDIR="/storage/.config/emulationstation/themesettings"
CONFILE="${CONDIR}/Crystal.cfg"
ESSETTINGS="/storage/.config/emulationstation/es_settings.cfg"

if [ ! -e "${CONFILE}" ]; then 
    mkdir -p "${CONDIR}"
    touch "${CONFILE}"
    sed -i '/<string name="ThemeSystemView"/d' "${ESSETTINGS}"
    sed -i '/<\/config>/d' "${ESSETTINGS}"
    
    if [ -e "/dev/input/by-path/platform-odroidgo2-joypad-joystick" ]; then
        echo "systemview=panel32" > "${CONFILE}"
        echo '<string name="ThemeSystemView" value="panel32" />' >> "${ESSETTINGS}"
    else
        echo "systemview=panel169" > "${CONFILE}"
        echo '<string name="ThemeSystemView" value="panel169" />' >> "${ESSETTINGS}"
    fi
    echo '</config>' >> "${ESSETTINGS}" 
fi

fi

if [[ ! -f "/storage/newcfg" ]]; then
cp -f "/usr/config/emulationstation/es_systems.cfg" "/storage/.config/emulationstation/es_systems.cfg"
touch /storage/newcfg
fi

BTENABLED=$(get_ee_setting ee_bluetooth.enabled)
if [[ "$BTENABLED" == "1" ]]; then

# Search for bluetooth gamepads while ES loads. 
(
# Kill the BT agent if exists, in case of restart 
NPID=$(pgrep -f batocera-bluetooth-agent)
if [[ ! -z "$NPID" ]]; then
	kill "$NPID"
fi
echo "EmuELEC Bluetooth Log" > /emuelec/logs/bt.log
sleep 5
echo "Starting..." >> /emuelec/logs/bt.log
python /emuelec/scriptmodules/supplementary/bluetoothcontroller.py >> /emuelec/logs/bt.log 2>&1

# only start the bt agent if not already running 
NPID=$(pgrep -f batocera-bluetooth-agent)
if [[ -z "$NPID" ]]; then
 (systemd-run batocera-bluetooth-agent) || :
fi
) &
fi 

# Check if pico-8 was installed, if so create a dummy file
[[ -e "/storage/roms/bios/pico-8" ]] && touch /storage/roms/pico-8/splore.p8 || rm /storage/roms/pico-8/splore.p8 > /dev/null 2>&1

exit 0
